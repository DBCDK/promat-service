openapi: 3.0.1
info:
  title: Promat service
  description: >-
    Provides backend services for the Promat system.
  license:
    name: GPL-3.0
    url: 'https://github.com/DBCDK/promat-service/blob/master/LICENCE.txt'
  version: 1.0-SNAPSHOT

tags:
  - name: reviewers
    description: Users writing professional reviews
  - name: subjects
    description: Fields of interests
  - name: records
    description: List of faustnumbers matching a given id
  - name: cases
    description: Cases

paths:
  /reviewers:
    get:
      tags:
        - reviewers
      summary: Returns list of reviewers
      operationId: getReviewers
      parameters:
        - name: deadline
          in: query
          required: false
          description: Optional filter on deadline date as defined by RFC3339,
                       meaning only reviewers available for the deadline will be returned.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewerList'
        '400':
          description: bad request, invalid deadline date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'

  /subjects:
    get:
      tags:
        - subjects
      summary: Returns list of all known subjects
      operationId: getSubjects
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectList'

  /records/{id}:
    get:
      tags:
        - records
      summary: Return zero or more faust numbers that match the given id.
               The id can be a faust number or an isbn-10 or isbn-13 number.
      operationId: getRecords
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            minimum: 1
            maximum: 1
            description: Identifier to lookup. Can be faust, isbn-10 or isbn-13
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordsList'

  /cases/{id}:
    get:
      tags:
        - cases
      summary: Returns a case with the given id
      operationId: getCase
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: Case id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'

  /cases:
    get:
      tags:
        - cases
      summary: Returns list of cases for the given faustnumber
      operationId: getCasesForFaust
      parameters:
        - in: query
          name: number
          required: true
          schema:
            type: string
            description: Faustnumber that most be covered by the cases returned
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseSummaryList'
    post:
      tags:
        - cases
      summary: Create new case. (id and status fields will be ignored if they exists.)
      operationId: createCase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Case'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '409':
          description: Conflict. A case with a status other than DONE or CLOSED already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
    put:
      tags:
        - cases
      summary: Update an existing case
      operationId: updateCase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Case'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '409':
          description: Case could not be updated, check ServiceError in body for specifics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'

components:
  schemas:
    Address:
      type: object
      properties:
        address1:
          type: string
        address2:
          type: string
        zip:
          type: integer
        city:
          type: string
      required:
        - address1
        - zip
        - city

    ReviewerList:
      type: object
      properties:
        numFound:
          type: integer
        reviewers:
          type: array
          items:
            $ref: '#/components/schemas/Reviewer'
      required:
        - numFound
        - reviewers

    Reviewer:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        institution:
          type: string
        paycode:
          type: integer
        hiatus_begin:
          type: string
          format: date
        hiatus_end:
          type: string
          format: date
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
      required:
        - id
        - firstName
        - lastName
        - email
        - address
        - institution
        - paycode
        - subjects

    ServiceError:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ServiceErrorCode'
        cause:
          type: string
          description: Specific cause of the error,
                       for example the name of an invalid query parameter.
        details:
          type: string
      required:
        - code
        - cause

    ServiceErrorCode:
      type: string
      enum:
        - INVALID_QUERY_PARAM
        - CASE_EXISTS           # Active case for this/these faust/fausts exists
        - INVALID_STATE         # Change to a new state was not possible or invalid
        - FAILED                # Some error occurred while updating the item

    SubjectList:
      type: object
      properties:
        numFound:
          type: integer
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
      required:
        - numFound
        - subjects

    Subject:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        parentId:
          type: integer
      required:
        - id
        - name

    RecordsList:
      type: object
      properties:
        numFound:
          type: integer
        records:
          type: array
          description: A list of faustnumbers matching the given id
          items:
            $ref: '#/components/schemas/Record'
      required:
        - numFound
        - records

    Record:
      type: object
      properties:
        faust:
          type: integer
          description: Faustnumber
        isPrimary:
          type: boolean
          description: Set to true for the faustnumber that currently is the primary object in the work
      required:
        - faust

    CaseSummaryList:
      type: object
      properties:
        numFound:
          type: integer
        cases:
          type: array
          items:
            $ref: '#/components/schemas/CaseSummary'
      required:
        - numFound
        - cases

    CaseSummary:
      type: object
      properties:
        id:
          type: integer
          description: Case id
        title:
          type: string
          description: Case title (free form, not tied to the bibliographic title of any of the faustnumbers)
        primaryFaust:
          type: string
          description: Faustnumber for the primary manifestations, typically one of the paperbooks
        relatedFausts:
          type: array
          items:
            type: string
            description: Other faustnumbers that should link to the review produced by this case
          minItems: 0
        deadline:
          type: string
          format: date
          nullable: true
          description: Date of delivery
        status:
          type: string
          enum:
            - 'CREATED'
            - 'ASSIGNED'
            - 'DONE'
            - 'CLOSED'
          description: Enum describing the overall state of this case
            CREATED = Case has been created but still needs refinement
            ASSIGNED = Case has been assigned and is in progress
            DONE = All tasks is either done or closed
            CLOSED = Case has been closed, individual task states is undefined
      required:
        - id
        - title
        - primaryFaust
        - relatedFausts

    Case:
      type: object
      properties:
        id:
          type: integer
          description: Case id
        title:
          type: string
          description: Case title (free form, not tied to the bibliographic title of any of the faustnumbers)
        primaryFaust:
          type: string
          description: Faustnumber for the primary manifestations, typically one of the paperbooks
        relatedFausts:
          type: array
          items:
            type: string
          description: Other faustnumbers that should link to the review produced by this case
          minItems: 0
        reviewer:
          $ref: '#/components/schemas/Reviewer'
          nullable: true
          description: The selected reviewer, if any otherwise null
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
          minItems: 0
          description: One or more subjects covered by the work to review
        created:
          type: string
          format: date
          description: Date of creation
        deadline:
          type: string
          format: date
          nullable: true
          description: Date of delivery
        status:
          type: string
          enum:
            - 'CREATED'
            - 'REJECTED'
            - 'ASSIGNED'
            - 'READY'
            - 'DONE'
            - 'CLOSED'
          description: Enum describing the overall state of this case
                       CREATED = Case has been created but still needs refinement
                       REJECTED = Case has been assigned and rejected by the reviewer
                       ASSIGNED = Case has been assigned and is in progress
                       READY = All tasks is ready for approvement
                       DONE = All tasks is approved and either done or closed
                       CLOSED = Case has been closed, individual task states is undefined
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          minItems: 0
      required:
        - id
        - title
        - primaryFaust
        - relatedFausts
        - reviewer
        - subjects
        - created
        - deadline
        - status
        - tasks

    Task:
      type: object
      properties:
        id:
          type: integer
          description: Task id
        typeOfTask:
          type: string
          enum:
            - 'NONE'  # Todo: define needed task types
          description: Type of task
        created:
          type: string
          format: date
          description: Date of creation
        paycode:
          type: string
          enum:
            - 'NONE'  # Todo: define paycodes
          description: Payment code
        approved:
          type: string
          format: date
          nullable: true
          description: Date of approvement
        payed:
          type: string
          format: date
          nullable: true
          description: Date when first added to a periods payroll. This value must not change hereafter
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaskField'
      required:
        - id
        - typeOfTask
        - created
        - paycode
        - approved
        - payed
        - data

    TaskField:
      type: object
      properties:
        id:
          type: integer
          description: Task data id
        typeOfField:
          type: string
          enum:
            - 'NONE'  # Todo: define field types (aka. template fields)
        data:
          type: string
          description: The fields value
          nullable: true
      required:
        - id
        - typeOfData
        - data

